plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'jacoco'
    id "io.freefair.lombok" version "6.1.0"
    id 'maven-publish'
    id 'signing'
}

group = 'software.amazon.lynx'
version = '1.4.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'com.nimbusds:nimbus-jose-jwt:[9,9.31]'

    // These dependencies is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.amazonaws:aws-java-sdk-kms:[1.12, 2)'
    implementation 'commons-cli:commons-cli:[1.4, 2)'
    implementation 'com.google.guava:guava:[32,)'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.+'
    testImplementation 'org.assertj:assertj-core:[3,4)'

    // Mockito
    testImplementation 'org.mockito:mockito-core:[3,4)'
    testImplementation 'org.mockito:mockito-inline:[3,4)'
    testImplementation 'org.mockito:mockito-junit-jupiter:[3,4)'

    // Easy Rand
    testImplementation 'org.jeasy:easy-random-core:4.3.0'
}

apply from: 'scripts.gradle'
apply from: 'maven.gradle'

test {
    useJUnitPlatform() // Use JUnit Platform for unit tests.
}

// JoCoCo config
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    'com.nimbusds.jose.crypto.*',
                    'com.nimbusds.jose.aws.kms.exceptions.*',
                    'com.nimbusds.jose.aws.kms.scripts.*',
            ]
            limit {
                counter = 'BRANCH'
                minimum = 1.00
            }
            limit {
                counter = 'LINE'
                minimum = 1.00
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification
